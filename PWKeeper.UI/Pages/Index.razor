@page "/"
@inject StorageHandler Storage
@inject TestModel test

<PageTitle>Index</PageTitle>

@if (!loggedIn)
{
    <div class="d-flex align-items-center" style="height: 512px">
        <div class="container">
            @if (!Storage.CustomStorage)
            {
                <div class="row justify-content-center">
                    <div class="form-group col-3">
                        <label for="formGroupExampleInput">Login</label>
                        <input type="text" class="form-control" id="formGroupExampleInput" placeholder="login" @bind="login" disabled=@Storage.CustomStorage>
                    </div>
                </div>
            } else
            {
                <div class="row justify-content-center">
                    <div class="form-group col-3">
                        <label for="filePath">Storage</label>
                        <input type="text" class="form-control" id="filePath" placeholder=".dat file location path" @bind="login" disabled=@Storage.CustomPath>
                    </div>
                </div>
            }
            <div class="row justify-content-center">
                <div class="form-group col-3">
                    <label for="formGroupExampleInput2">Password</label>
                    <input type="password" class="form-control" id="formGroupExampleInput2" placeholder="password" @bind="password" disabled=@loggedIn>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="form-group col-3">
                    <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" @bind="Storage.CustomStorage" disabled="true">
                    <label class="form-check-label" for="flexCheckDefault">
                        Custom storage
                    </label>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="form-group col-3">
                    <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked" @bind="Storage.AutoBackup">
                    <label class="form-check-label" for="flexCheckChecked">
                        Auto Backup
                    </label>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="form-group col-3 d-flex justify-content-end">
                    <button class="btn btn-primary mt-2" @onclick=SignIn disabled=@loggedIn>SignIn</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    @if (storage != null)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Email</th>
                    <th scope="col">Login</th>
                    <th scope="col">Password</th>
                    <th scope="col">Description</th>
                    <th scope="col"></th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var (item, index) in storage.Select((value, i) => (value, i)))
                {
                    @if (updateIndex != index || updateIndex == null)
                    {
                        <tr>
                            <th scope="row">@index</th>
                            <td>@item.Email</td>
                            <td>@item.Login</td>
                            <td @onclick="()=> {pwShow = !pwShow;}">
                                @if (pwShow)
                                {
                                    @item.Password
                                }
                                else
                                {
                                    <span>*************</span>
                                }
                            </td>
                            <td>@item.Description</td>
                            <td><button @onclick="() => UpdateState(index, item)" disabled=@btnSleep class="btn btn-secondary">edit</button></td>
                            <td><button @onclick="() => DeleteItem(index)" disabled=@btnSleep class="btn btn-danger">delete</button></td>
                        </tr>
                    }
                    else
                    {
                        @if (updateStorageItem != null)
                        {
                            <tr>
                                <th scope="row">@index</th>
                                <td>
                                    <input type="email" class="form-control" id="formGroupExampleInput2" placeholder="name" @bind="updateStorageItem.Email">
                                </td>
                                <td>
                                    <input type="text" class="form-control" id="formGroupExampleInput2" placeholder="email" @bind="updateStorageItem.Login">
                                </td>
                                <td>
                                    <input type="password" class="form-control" id="formGroupExampleInput2" placeholder="password" @bind="updateStorageItem.Password">
                                </td>
                                <td>
                                    <textarea class="form-control" id="formGroupExampleInput2" placeholder="description" @bind="updateStorageItem.Description" />
                                </td>
                                <td><button @onclick="() => ReplaceItem(index)" class="btn btn-success">save</button></td>
                                <td><button @onclick="() => CancelState(index)" class="btn btn-warning">cancel</button></td>
                            </tr>
                        }
                    }
                }
                <tr>
                    <th scope="row"></th>
                    @if (addStorageItem != null)
                    {
                        <td>
                            <input type="email" class="form-control" id="formGroupExampleInput2" placeholder="email" @bind="addStorageItem.Email" disabled=@btnSleep>
                        </td>
                        <td>
                            <input type="text" class="form-control" id="formGroupExampleInput2" placeholder="login" @bind="addStorageItem.Login" disabled=@btnSleep>
                        </td>
                        <td>
                            <input type="password" class="form-control" id="formGroupExampleInput2" placeholder="password" @bind="addStorageItem.Password" disabled=@btnSleep>
                        </td>
                        <td>
                            <textarea class="form-control" id="formGroupExampleInput2" placeholder="description" @bind="addStorageItem.Description" disabled=@btnSleep />
                        </td>
                        <td>
                            <button @onclick=AddItem disabled=@btnSleep class="btn btn-primary">add</button>
                        </td>
                    }
                </tr>
            </tbody>
        </table>
    }
}
<p class="text-center">
    <!--@test.Secret -->
    @Storage.ExceptionMessage
</p>

@code {
    private string? login { get; set; }
    private string? password { get; set; }
    private List<StorageItemModel>? storage { get; set; }
    private bool loggedIn = false;
    private bool btnSleep = false;
    private bool pwShow = false;
    private StorageItemModel? addStorageItem;
    private StorageItemModel? updateStorageItem;
    private int? updateIndex = null;

    protected override void OnInitialized()
    {
        storage = new();
        addStorageItem = new()
            {
                Email = "",
                Login = "",
                Password = "",
                Description = ""
            };
        updateStorageItem = new()
            {
                Email = "",
                Login = "",
                Password = "",
                Description = ""
            };

        base.OnInitialized();
    }


    private async void SignIn()
    {
        if ((password != null) && (password != string.Empty))
        {
            if (Storage.CustomStorage)
            {
                if (await Storage.Build(new LookyAlgo(password)))
                {
                    storage = Storage.GetStorage;
                    loggedIn = true;
                    login = string.Empty;
                    password = string.Empty;
                }
            }
            else if ((login != null) && (login != string.Empty))
            {
                if (await Storage.Build(login, new LookyAlgo(password)))
                {
                    storage = Storage.GetStorage;
                    loggedIn = true;
                    login = string.Empty;
                    password = string.Empty;
                }
            }
            StateHasChanged();
        }
    }

    private void UpdateState(int index, StorageItemModel item)
    {
        updateStorageItem = new()
            {
                Email = item.Email,
                Login = item.Login,
                Password = item.Password,
                Description = item.Description
            };
        updateIndex = index;
        btnSleep = true;
    }
    private void CancelState(int index)
    {
        updateStorageItem = new()
            {
                Email = "",
                Login = "",
                Password = "",
                Description = ""
            };
        updateIndex = null;
        btnSleep = false;
    }
    private async Task<bool> AddItem()
    {
        if (addStorageItem != null)
        {
            btnSleep = true;
            await Storage.AddItemAsync(addStorageItem);
            addStorageItem = new()
                {
                    Email = "",
                    Login = "",
                    Password = "",
                    Description = ""
                };
            storage = Storage.GetStorage;
            await Task.Delay(1000);
            btnSleep = false;
        }
        return true;
    }
    private async Task<bool> DeleteItem(int index)
    {
        btnSleep = true;
        await Storage.RemoveItemAsync(index);
        storage = Storage.GetStorage;
        await Task.Delay(1000);
        btnSleep = false;
        return true;
    }
    private async Task<bool> ReplaceItem(int index)
    {
        if (updateStorageItem != null)
        {
            await Storage.UpdateItemAsync(index, updateStorageItem);
            storage = Storage.GetStorage;
            await Task.Delay(1000);
        }
        CancelState(index);
        return true;
    }
}